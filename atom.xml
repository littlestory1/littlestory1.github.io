<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>alittlestory</title>
    <subtitle></subtitle>
    <icon>http://example.com/images/favicon.ico</icon>
    <link href="http://example.com" />
    <author>
      <name>alittlestory</name>
    </author>
    <updated>2023-11-21T14:38:11.000Z</updated>
    <entry>
        <id>http://example.com/2023/11/21/stm32%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/</id>
        <title>stm32前言</title>
        <link rel="alternate" href="http://example.com/2023/11/21/stm32%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要用于记录 stm32 的知识点以及学习过程，这样慢慢积累下来，会有莫名的成就感&lt;/p&gt;
&lt;p&gt;如果有误，欢迎加我 qq 指出错误&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用板子：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;stm32f103c8t6 最小系统板&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stm32 三种开发方式的区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;寄存器模式&lt;/strong&gt;：最底层的开发，运行速度最快。实际上也是使用了固件库，但是不是使用固件库的函数，而是使用了固件库的定义，包括宏定义，结构体定义。和 51 的开发差不多，但因为 32 的寄存器太多，实际开发手动配置大量寄存器极其耗费时间，同时在没有注释的情况下可读性差，所以较少使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标准库模式&lt;/strong&gt;：基于寄存器进行了函数的封装，而由于函数封装以及内部大量的检查参数有效性的代码，运行速度相对于寄存器模式较慢。封装之后可以根据函数名字就能明白代码作用，容易记忆，使用方便，所以较多人使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HAL 库模式&lt;/strong&gt;：全称是 Hardware Abstraction Layer（抽象印象层），相比于标准库更加深入的封装，有句柄、回调函数等概念，因此相对于标准库模式有更好的可移植性（可在不同芯片的移植），但代价就是更多的性能损失。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="stm32" scheme="http://example.com/tags/stm32/" />
        <updated>2023-11-21T14:38:11.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/11/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
        <title>第一篇博客</title>
        <link rel="alternate" href="http://example.com/2023/11/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
        <content type="html">&lt;p&gt;觉得原本的博客主题过于花里胡哨，于是换了个主题，然后把全部文章删了，重新整理，重新写&lt;/p&gt;
</content>
        <category term="杂谈" scheme="http://example.com/tags/%E6%9D%82%E8%B0%88/" />
        <updated>2023-11-21T14:23:55.000Z</updated>
    </entry>
</feed>
