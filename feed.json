{
    "version": "https://jsonfeed.org/version/1",
    "title": "昨日已逝，明日未知，而今日为金",
    "subtitle": "",
    "icon": "https://littlestory1.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://littlestory1.github.io",
    "items": [
        {
            "id": "https://littlestory1.github.io/2023/11/24/stm32/stm32-GPIO/",
            "url": "https://littlestory1.github.io/2023/11/24/stm32/stm32-GPIO/",
            "title": "stm32(GPIO)",
            "date_published": "2023-11-24T12:57:49.000Z",
            "content_html": "<h4 id=\"首先我们先来学习如何开时钟\"><a class=\"anchor\" href=\"#首先我们先来学习如何开时钟\">#</a> <strong>首先我们先来学习如何开时钟：</strong></h4>\n<p><strong>1：为什么需要开时钟？</strong></p>\n<p>我们可以通俗的理解时钟是外设电路的心脏，不打开时钟就无法使用。每个外设都有独立时钟，如果不打开时钟外设就不能用，原因就是为了低功耗节省用电，不用的外设可以不打开时钟</p>\n<p><strong>2：如何开启对应时钟？</strong></p>\n<p>首先，我们需要看芯片对应的外设总线架构图</p>\n<p><img data-src=\"%E6%80%BB%E7%BA%BF%E6%9E%B6%E6%9E%84.jpg\" alt=\"总线架构\"></p>\n<p>假设我们现在需要开 GPIOA 的时钟，我们可以看到 GPIOA 是在 APB2 外设总线上的，那么开启 GPIOA 时钟代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_GPIOA<span class=\"token punctuation\">,</span> ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>关闭时钟代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_GPIOA<span class=\"token punctuation\">,</span> DISENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"一-gpio是什么\"><a class=\"anchor\" href=\"#一-gpio是什么\">#</a> 一、GPIO 是什么？</h4>\n<p>GPIO 全称 General Purpose Input Output 即通用输入 / 输出，其实 GPIO 的本质就是芯片的一个引脚，通常在 ARM 中所有的 I/O 都是通用的。不过由于每个开发板上都会设计不同的外围电路，这就造成 GPIO 的功能可能有所不同，大部分 GPIO 都是有复用功能的，比如有些 GPIO 可能是串口的 TX 或 RX，也可能是 I2C 的 SCL 或 SDA 线。</p>\n<p>所以我们不仅要知道 GPIO 能够输出高低电平，还要理解为什么有些 GPIO 可以复用某些功能，而其他的不可以。</p>\n<h4 id=\"二-gpio内部结构\"><a class=\"anchor\" href=\"#二-gpio内部结构\">#</a> 二、GPIO 内部结构</h4>\n<p><img data-src=\"GPIO%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt=\"GPIO结构图\"></p>\n<h4 id=\"gpio八种模式\"><a class=\"anchor\" href=\"#gpio八种模式\">#</a> GPIO 八种模式</h4>\n<table>\n<thead>\n<tr>\n<th><strong>模式</strong></th>\n<th></th>\n<th><strong>介绍</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>浮空输入</td>\n<td>GPIO_Mode_IN_FLOATING</td>\n<td>若引脚悬空，则电平不确定</td>\n</tr>\n<tr>\n<td>上拉输入</td>\n<td>GPIO_Mode_IPU</td>\n<td>内部连接上拉电阻，悬空时默认高电平</td>\n</tr>\n<tr>\n<td>下拉输入</td>\n<td>GPIO_Mode_IPD</td>\n<td>内部连接下拉电阻，悬空时默认低电平</td>\n</tr>\n<tr>\n<td>模拟输入</td>\n<td>GPIO_Mode_AIN</td>\n<td>GPIO 无效，引脚直接接入内部 ADC</td>\n</tr>\n<tr>\n<td>开漏输出</td>\n<td>GPIO_Mode_Out_OD</td>\n<td>高电平为高阻态，低电平接 VSS（负极）</td>\n</tr>\n<tr>\n<td>推挽输出</td>\n<td>GPIO_Mode_Out_PP</td>\n<td>高电平接 VDD，低电平接 VSS</td>\n</tr>\n<tr>\n<td>复用开漏输出</td>\n<td>GPIO_Mode_AF_OD</td>\n<td>由片上外设控制，高电平为高阻态，低电平接 VSS</td>\n</tr>\n<tr>\n<td>复用推挽输出</td>\n<td>GPIO_Mode_AF_PP</td>\n<td>由片上外设控制，高电平接 VDD，低电平接 VSS</td>\n</tr>\n</tbody>\n</table>\n<p><strong>名词解释：</strong></p>\n<p>高阻态：是一个数字电路里常见的术语，指的是电路的一种输出状态，既不是高电平也不是低电平，如果高阻态再输入下一级电路的话，对下级电路无任何影响，和没接一样，如果用万用表测的话有可能是高电平也有可能是低电平，随它后面接的东西定的。电路分析时高阻态可做开路理解。你可以把它看作输出（输入）电阻非常大。它的极限状态可以认为悬空（开路）。也就是说理论上高阻态不是悬空，它是对地或对电源电阻极大的状态。而实际应用上与引脚的悬空几乎是一样的。</p>\n",
            "tags": [
                "stm32单片机",
                "stm32"
            ]
        },
        {
            "id": "https://littlestory1.github.io/2023/11/21/stm32/stm32%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/",
            "url": "https://littlestory1.github.io/2023/11/21/stm32/stm32%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/",
            "title": "stm32前言",
            "date_published": "2023-11-21T14:38:11.000Z",
            "content_html": "<p><strong>前言</strong></p>\n<p>主要用于记录 stm32 的知识点以及学习过程，这样慢慢积累下来，会有莫名的成就感</p>\n<p>如果有误，欢迎加我 qq 指出错误</p>\n<p><strong>使用板子：</strong></p>\n<p>stm32f103c8t6 最小系统板</p>\n<p><strong>stm32 三种开发方式的区别</strong></p>\n<ul>\n<li><strong>寄存器模式</strong>：最底层的开发，运行速度最快。实际上也是使用了固件库，但是不是使用固件库的函数，而是使用了固件库的定义，包括宏定义，结构体定义。和 51 的开发差不多，但因为 32 的寄存器太多，实际开发手动配置大量寄存器极其耗费时间，同时在没有注释的情况下可读性差，所以较少使用。</li>\n<li><strong>标准库模式</strong>：基于寄存器进行了函数的封装，而由于函数封装以及内部大量的检查参数有效性的代码，运行速度相对于寄存器模式较慢。封装之后可以根据函数名字就能明白代码作用，容易记忆，使用方便，所以较多人使用。</li>\n<li><strong>HAL 库模式</strong>：全称是 Hardware Abstraction Layer（抽象印象层），相比于标准库更加深入的封装，有句柄、回调函数等概念，因此相对于标准库模式有更好的可移植性（可在不同芯片的移植），但代价就是更多的性能损失。</li>\n</ul>\n<p><strong>本系列采用标准库模式</strong></p>\n",
            "tags": [
                "stm32单片机",
                "stm32"
            ]
        },
        {
            "id": "https://littlestory1.github.io/2023/11/21/note/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "url": "https://littlestory1.github.io/2023/11/21/note/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "title": "第一篇博客",
            "date_published": "2023-11-21T14:23:55.000Z",
            "content_html": "<p>觉得原本的博客主题过于花里胡哨，于是换了个主题，然后把全部文章删了，重新整理，重新写</p>\n",
            "tags": [
                "杂谈",
                "杂谈"
            ]
        }
    ]
}