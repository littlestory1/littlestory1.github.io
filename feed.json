{
    "version": "https://jsonfeed.org/version/1",
    "title": "昨日已逝，明日未知，而今日为金",
    "subtitle": "",
    "icon": "https://littlestory1.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://littlestory1.github.io",
    "items": [
        {
            "id": "https://littlestory1.github.io/2023/12/26/note/%E5%AD%A6%E6%9C%9F%E7%BB%93%E6%9D%9F/",
            "url": "https://littlestory1.github.io/2023/12/26/note/%E5%AD%A6%E6%9C%9F%E7%BB%93%E6%9D%9F/",
            "title": "学期结束",
            "date_published": "2023-12-26T11:20:54.000Z",
            "content_html": "<p>一转眼，又过去了一学期，这学期可以说还是很颓废，什么都没学到没干成。许多计划一拖再拖，直到学期结束都没有开始实施，很难受，深感自己太懒了。而我的朋友以及找到实习了，看来我也得加油了。下学期的蓝桥杯冲一下省一，这几天先看看校内的物联网比赛能不能想出些作品，原本计划的基于旭日 x3 派的跟随小车估计不太行，近期一直在做这个，但一直没有进展下面大概说下吧：</p>\n<p>首先是网络的问题，一开始下载了官方的 2.0 的镜像，配置好网络后，经常出现没网的问题或者 ssh 连不上，很是头疼，网上许多方法都尝试过，依旧不行，也试过重装镜像，还是这样。最后是安装了最新 2.1 版本的镜像解决的。流汗黄豆</p>\n<p>然后就是在官方 tros 的问题，一开始我是根据论坛的教程来的，但每次 apt install hhp 都会出问题一直提示没找到该包，试过更换下载源，问题更多了，很是难绷，后来发现，是官方的 tros 已经更新到 tros2 了，不再叫 hhp，但官方论坛上大多都是上一年的帖子，所以白折腾了半天时间。后面在调用摄像头的时候，也是许多问题，官方资料信息滞后，然后各种包的更新又是经常删改，而资料也不更新，这点还是在看更新日志发现的，更死的是论坛基本没人，这时我便体会到小众板子的缺点，始终还得是树莓派。我现在也放弃这个了，全部交给朋友尝试了。我则准备 planB。</p>\n<p>总结这学期学得一坨，希望下学期好好加油吧</p>\n<p>下面放几张回家路上的蓝天：</p>\n<p><img data-src=\"%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231226192414.jpg\" alt></p>\n<p><img data-src=\"%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231226192443.jpg\" alt=\"微信图片_20231226192443\"></p>\n",
            "tags": [
                "杂谈",
                "杂谈"
            ]
        },
        {
            "id": "https://littlestory1.github.io/2023/12/04/stm32/%E7%BA%A2%E5%A4%96%E6%B5%8B%E6%AC%A1/",
            "url": "https://littlestory1.github.io/2023/12/04/stm32/%E7%BA%A2%E5%A4%96%E6%B5%8B%E6%AC%A1/",
            "title": "红外计次",
            "date_published": "2023-12-04T13:12:03.000Z",
            "content_html": "<p><strong>连线图：</strong></p>\n<p><img data-src=\"image-20231204211750143.png\" alt=\"image-20231204211750143\"></p>\n<p>DO -&gt; B14</p>\n<p>在正确连接通电后，可以看到红外传感器亮起，当挡光片在槽位中时，开关指示灯灭。</p>\n<p>代码编写思路分析：</p>\n<p>我们先看回 EXTI 基本结构：</p>\n<p><img data-src=\"image-20231204214112102.png\" alt=\"image-20231204214112102\"></p>\n<p>我们需要使用到 GPIOB，AFIO，EXTI</p>\n<p>在使用之前，我们得先开时钟，其中 EXTI 不需要开启时钟：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_GPIOB<span class=\"token punctuation\">,</span>ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_AFIO<span class=\"token punctuation\">,</span>ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样我们就开启了 GPIOB，AFIO 的时钟了，然后就是引脚的初始化了：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//GPIOB 引脚初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GPIO_InitTypeDef GPIO_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 指定 Pin14 为上拉输入模式（内部连接上拉电阻，悬空时默认高电平）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode<span class=\"token operator\">=</span> GPIO_Mode_IPU<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin<span class=\"token operator\">=</span> GPIO_Pin_14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed<span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接着就是配置 AFIO 外设了，在此之前，先来介绍几个 AFIO 的库函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 复位 AFIO 外设，清除 AFIO 外设配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_AFIODeInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 锁定 GPIO 配置，参数指定某个引脚，锁定该引脚配置，防止意外更改</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_PinLockConfig</span><span class=\"token punctuation\">(</span>GPIO_TypeDef<span class=\"token operator\">*</span> GPIOx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint16_t</span> GPIO_Pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 配置 AFIO 的事件输出功能</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_EventOutputConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> GPIO_PortSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> GPIO_PinSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_EventOutputCmd</span><span class=\"token punctuation\">(</span>FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 用来进行引脚重映射，参数一为重映射方式，参数二为新的状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_PinRemapConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> GPIO_Remap<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 配置 AFIO 的数据选择器，来选择中断引脚，也是本次所需要用到的函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_EXTILineConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> GPIO_PortSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> GPIO_PinSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 官方库函数及其解释</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  * @brief  Selects the GPIO pin used as EXTI Line.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  * @param  GPIO_PortSource: selects the GPIO port to be used as source for EXTI lines.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..G).</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  * @param  GPIO_PinSource: specifies the EXTI line to be configured.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  *   This parameter can be GPIO_PinSourcex where x can be (0..15).</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  * @retval None</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  */</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GPIO_EXTILineConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> GPIO_PortSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint8_t</span> GPIO_PinSource<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token class-name\">uint32_t</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">/* Check the parameters */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">assert_param</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_GPIO_EXTI_PORT_SOURCE</span><span class=\"token punctuation\">(</span>GPIO_PortSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">assert_param</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_GPIO_PIN_SOURCE</span><span class=\"token punctuation\">(</span>GPIO_PinSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x0F</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x04</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>GPIO_PinSource <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x03</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  AFIO<span class=\"token operator\">-></span>EXTICR<span class=\"token punctuation\">[</span>GPIO_PinSource <span class=\"token operator\">>></span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  AFIO<span class=\"token operator\">-></span>EXTICR<span class=\"token punctuation\">[</span>GPIO_PinSource <span class=\"token operator\">>></span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span>GPIO_PortSource<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x04</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>GPIO_PinSource <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x03</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>配置 AFIO 外设</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 选择 GPIOB 作为外部中断源，指定 Pin14 为外部中断线</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">GPIO_EXTILineConfig</span><span class=\"token punctuation\">(</span>GPIO_PortSourceGPIOB<span class=\"token punctuation\">,</span>GPIO_PinSource14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>配置完 AFIO 后，PB14 引脚的电平信号就可以顺利通过 AFIO，进入到 EXTI 电路了</p>\n<p>接下来，就是配置 EXTI 了，老样子，我们先了解一下 EXTI 的库函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 清除 EXTI 配置，恢复上电默认状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">EXTI_DeInit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 调用这个函数，就可以根据结构体参数里的参数配置 EXTI 外设</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">EXTI_Init</span><span class=\"token punctuation\">(</span>EXTI_InitTypeDef<span class=\"token operator\">*</span> EXTI_InitStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 可以把参数传递的结构体变量赋一个默认值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">EXTI_StructInit</span><span class=\"token punctuation\">(</span>EXTI_InitTypeDef<span class=\"token operator\">*</span> EXTI_InitStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 用于软件触发外部中断的</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">EXTI_GenerateSWInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> EXTI_Line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 可以获取指定的标志位是否被置 1 了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>FlagStatus <span class=\"token function\">EXTI_GetFlagStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> EXTI_Line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 可以对置 1 的标志位进行清除</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">EXTI_ClearFlag</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> EXTI_Line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 获取中断标志位是否被置 1 了</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ITStatus <span class=\"token function\">EXTI_GetITStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> EXTI_Line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 清除中断挂起标志位</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">EXTI_ClearITPendingBit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> EXTI_Line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>配置 EXTI</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>EXTI_InitTypeDef EXTI_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 指定配置中断线</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>EXTI_InitStructure<span class=\"token punctuation\">.</span>EXTI_Line <span class=\"token operator\">=</span> EXTI_Line14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 开启中断</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>EXTI_InitStructure<span class=\"token punctuation\">.</span>EXTI_LineCmd<span class=\"token operator\">=</span> ENABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 指定外部中断线模式为中断模式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>EXTI_InitStructure<span class=\"token punctuation\">.</span>EXTI_Mode<span class=\"token operator\">=</span> EXTI_Mode_Interrupt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 选择为下降沿触发</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>EXTI_InitStructure<span class=\"token punctuation\">.</span>EXTI_Trigger<span class=\"token operator\">=</span> EXTI_Trigger_Falling<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">EXTI_Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>EXTI_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样 EXTI 就配置完成了，PB14 的电平信号就可以通过 EXTI 通向下一级 NVIC 了，接下来就是配置 NVIC 了</p>\n<p>先了解一下库函数；</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用于指定中断分组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NVIC_PriorityGroupConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> NVIC_PriorityGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 根据结构体里面的参数初始化 NVIC</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NVIC_Init</span><span class=\"token punctuation\">(</span>NVIC_InitTypeDef<span class=\"token operator\">*</span> NVIC_InitStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置中断向量表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NVIC_SetVectorTable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> NVIC_VectTab<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> Offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 系统低功耗配置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NVIC_SystemLPConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span> LowPowerMode<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">SysTick_CLKSourceConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> SysTick_CLKSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>配置 NVIC</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//\t选择第二个分组，响应 2，抢占 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">NVIC_PriorityGroupConfig</span><span class=\"token punctuation\">(</span>NVIC_PriorityGroup_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>NVIC_InitTypeDef NVIC_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 选择 EXTI10-15 通道</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>NVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannel<span class=\"token operator\">=</span> EXTI15_10_IRQn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 选择使能</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannelCmd<span class=\"token operator\">=</span> ENABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 设定抢占优先级</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>NVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannelPreemptionPriority<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 设定响应优先级</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>NVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannelSubPriority<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">NVIC_Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>NVIC_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>中断函数的编写</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 中断函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">EXTI15_10_IRQHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 判断中断线路 14 标志位是否被置 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">EXTI_GetITStatus</span><span class=\"token punctuation\">(</span>EXTI_Line14<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tCountSensor_Count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">EXTI_ClearITPendingBit</span><span class=\"token punctuation\">(</span>EXTI_Line14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>所有代码展示：</strong></p>\n<p><strong>main.c</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stm32f10x.h\"</span>                  <span class=\"token comment\">// Device header</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"OLED.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CountSensor.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">OLED_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">CountSensor_Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">OLED_ShowString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Count:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">OLED_ShowNum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token function\">CountSensor_Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>CountSensor.h</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">__COUNT_SENSOR_H</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">__COUNT_SENSOR_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CountSensor_Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">uint16_t</span> <span class=\"token function\">CountSensor_Get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p><strong>CountSensor.c</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stm32f10x.h\"</span>                  <span class=\"token comment\">// Device header</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">uint16_t</span> CountSensor_Count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">CountSensor_Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_GPIOB<span class=\"token punctuation\">,</span>ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_AFIO<span class=\"token punctuation\">,</span>ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tGPIO_InitTypeDef GPIO_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tGPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode<span class=\"token operator\">=</span> GPIO_Mode_IPU<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tGPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin<span class=\"token operator\">=</span> GPIO_Pin_14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tGPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed<span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">GPIO_EXTILineConfig</span><span class=\"token punctuation\">(</span>GPIO_PortSourceGPIOB<span class=\"token punctuation\">,</span>GPIO_PinSource14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tEXTI_InitTypeDef EXTI_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tEXTI_InitStructure<span class=\"token punctuation\">.</span>EXTI_Line <span class=\"token operator\">=</span> EXTI_Line14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tEXTI_InitStructure<span class=\"token punctuation\">.</span>EXTI_LineCmd<span class=\"token operator\">=</span> ENABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tEXTI_InitStructure<span class=\"token punctuation\">.</span>EXTI_Mode<span class=\"token operator\">=</span> EXTI_Mode_Interrupt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tEXTI_InitStructure<span class=\"token punctuation\">.</span>EXTI_Trigger<span class=\"token operator\">=</span> EXTI_Trigger_Falling<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">EXTI_Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>EXTI_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">NVIC_PriorityGroupConfig</span><span class=\"token punctuation\">(</span>NVIC_PriorityGroup_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tNVIC_InitTypeDef NVIC_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tNVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannel<span class=\"token operator\">=</span> EXTI15_10_IRQn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tNVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannelCmd<span class=\"token operator\">=</span> ENABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tNVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannelPreemptionPriority<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tNVIC_InitStructure<span class=\"token punctuation\">.</span>NVIC_IRQChannelSubPriority<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">NVIC_Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>NVIC_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token class-name\">uint16_t</span> <span class=\"token function\">CountSensor_Get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> CountSensor_Count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">EXTI15_10_IRQHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">EXTI_GetITStatus</span><span class=\"token punctuation\">(</span>EXTI_Line14<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SET<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tCountSensor_Count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">EXTI_ClearITPendingBit</span><span class=\"token punctuation\">(</span>EXTI_Line14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"image-20231204223747017.png\" alt=\"image-20231204223747017\"></p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://littlestory1.github.io/2023/11/28/stm32/stm32-%E4%B8%AD%E6%96%AD%E7%B3%BB%E7%BB%9F/",
            "url": "https://littlestory1.github.io/2023/11/28/stm32/stm32-%E4%B8%AD%E6%96%AD%E7%B3%BB%E7%BB%9F/",
            "title": "stm32-中断系统",
            "date_published": "2023-11-28T12:24:47.000Z",
            "content_html": "<h1 id=\"中断系统\"><a class=\"anchor\" href=\"#中断系统\">#</a> 中断系统</h1>\n<ul>\n<li>中断：在主程序运行过程中，出现了特定的中断触发条件（中断源），使得 cpu 暂停当前正在运行的程序，转而去处理中断程序，处理完成后又返回原来被暂停的位置继续运行</li>\n<li>中断优先级：当有多个中断源同时申请中断时，cpu 会根据中断源的轻重缓急进行判决，优先相应更加紧急的中断源</li>\n<li>中断嵌套：当一个中断程序正在运行时，又有新的更高优先级的中断源申请中断，cpu 再次暂停当前中断程序，转而去处理新的中断程序，处理完成后依次返回</li>\n</ul>\n<h2 id=\"中断执行流程\"><a class=\"anchor\" href=\"#中断执行流程\">#</a> 中断执行流程</h2>\n<p><img data-src=\"image-20231128203106761.png\" alt=\"image-20231128203106761\"></p>\n<h1 id=\"stm32中断\"><a class=\"anchor\" href=\"#stm32中断\">#</a> stm32 中断</h1>\n<p>68 个可屏蔽中断同道，包含 EXTI、TIM、ADC、USART、SPI、I2C、RTC 等多个外设</p>\n<p>使用 NVIC 统一管理中断，每个中断通道都拥有 16 个可编程的优先等级，可对优先级进行分组，进一步设置抢占优先级和响应优先级</p>\n<h2 id=\"nvic\"><a class=\"anchor\" href=\"#nvic\">#</a> NVIC</h2>\n<h3 id=\"nvic基本结构\"><a class=\"anchor\" href=\"#nvic基本结构\">#</a> NVIC 基本结构</h3>\n<p><img data-src=\"image-20231201161530501.png\" alt=\"image-20231201161530501\"></p>\n<p>NVIC：嵌套中断向量控制器，在 stm32 中，它是用来统一分配中断优先级和管理中断的。NVIC 是一个内核外设。</p>\n<p>NVIC 只有一个输出口，NVIC 根据每个中断的优先级分配中断的先后顺序之后通过右边的一个输出口告诉 cpu 该执行哪个中断</p>\n<p>打个比喻，NVIC 相当于医院里的叫号系统，cpu 相当于医生，NVIC 将中断进行排序并依次单个进入 cpu 执行。</p>\n<h3 id=\"nvic优先级分组\"><a class=\"anchor\" href=\"#nvic优先级分组\">#</a> NVIC 优先级分组</h3>\n<ul>\n<li>NVIC 的中断优先级由优先级寄存器的四位（0~15）决定，这 4 位可以进行切分，分为高 n 位的抢占优先级和低 4-n 位的响应优先级</li>\n<li>抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，抢占优先级和响应优先级均相同的按中断号排队</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分组方式</th>\n<th>抢占优先级</th>\n<th>响应优先级</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分组 0</td>\n<td>0 位，取值为 0</td>\n<td>4 位，取值为 0~15</td>\n</tr>\n<tr>\n<td>分组 1</td>\n<td>1 位，取值为 0~1</td>\n<td>3 位，取值为 0~7</td>\n</tr>\n<tr>\n<td>分组 2</td>\n<td>2 位，取值为 0~3</td>\n<td>2 位，取值为 0~3</td>\n</tr>\n<tr>\n<td>分组 3</td>\n<td>3 位，取值为 0~7</td>\n<td>1 位，取值为 0~1</td>\n</tr>\n<tr>\n<td>分组 4</td>\n<td>4 位，取值为 0~15</td>\n<td>0 位，取值为 0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"exti\"><a class=\"anchor\" href=\"#exti\">#</a> EXTI</h2>\n<h3 id=\"exti简介\"><a class=\"anchor\" href=\"#exti简介\">#</a> EXTI 简介</h3>\n<ul>\n<li>EXTI（Extern Interrupt）外部中断</li>\n<li>EXTI 可以监测指定 GPIO 口的电平信号，当其指定的 GPIO 口产生电平变化时，EXTI 将立即向 NVIC 发出中断申请，经过 NVIC 裁决后即可中断 CPU 主程序，使 CPU 执行 EXTI 对应的中断程序</li>\n<li>支持的触发方式：</li>\n</ul>\n<ol>\n<li>​\t上升沿：电平从低电平变到高电平的瞬间触发中断</li>\n<li>​\t下降沿：电平从高电平变到低电平的瞬间触发中断</li>\n<li>​\t双边沿：上升沿和下降沿都可以触发中断</li>\n<li>​\t软件触发：引脚无变化，程序里执行一句代码，就能触发中断</li>\n</ol>\n<ul>\n<li>\n<p>支持的 GPIO 口：所有 GPIO 口，但相同的 Pin 不能同时触发中断</p>\n</li>\n<li>\n<p>同道数：16 个 GPIO_Pin，外加 PVD 输出，RTC 闹钟，USB 唤醒，以太网唤醒</p>\n</li>\n<li>\n<p>触发响应方式：中断响应 / 事件响应</p>\n</li>\n</ul>\n<p>总结：中断响应是正常的流程，引脚电平变化触发中断，事件响应不会触发中断，而是触发别的外设操作，属于外设之间的联合工作</p>\n<h3 id=\"exti基本结构\"><a class=\"anchor\" href=\"#exti基本结构\">#</a> EXTI 基本结构</h3>\n<p><img data-src=\"image-20231201164947649.png\" alt=\"image-20231201164947649\"></p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://littlestory1.github.io/2023/11/24/stm32/stm32-GPIO/",
            "url": "https://littlestory1.github.io/2023/11/24/stm32/stm32-GPIO/",
            "title": "stm32(GPIO)",
            "date_published": "2023-11-24T12:57:49.000Z",
            "content_html": "<h4 id=\"首先我们先来学习如何开时钟\"><a class=\"anchor\" href=\"#首先我们先来学习如何开时钟\">#</a> <strong>首先我们先来学习如何开时钟：</strong></h4>\n<h5 id=\"1为什么需要开时钟\"><a class=\"anchor\" href=\"#1为什么需要开时钟\">#</a> <strong>1：为什么需要开时钟？</strong></h5>\n<p>我们可以通俗的理解时钟是外设电路的心脏，不打开时钟就无法使用。每个外设都有独立时钟，如果不打开时钟外设就不能用，原因就是为了低功耗节省用电，不用的外设可以不打开时钟</p>\n<h5 id=\"2如何开启对应时钟\"><a class=\"anchor\" href=\"#2如何开启对应时钟\">#</a> <strong>2：如何开启对应时钟？</strong></h5>\n<p>首先，我们需要看芯片对应的外设总线架构图</p>\n<p><img data-src=\"%E6%80%BB%E7%BA%BF%E6%9E%B6%E6%9E%84.jpg\" alt=\"总线架构\"></p>\n<p>假设我们现在需要开 GPIOA 的时钟，我们可以看到 GPIOA 是在 APB2 外设总线上的，那么开启 GPIOA 时钟代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_GPIOA<span class=\"token punctuation\">,</span> ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>关闭时钟代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_GPIOA<span class=\"token punctuation\">,</span> DISENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"一-gpio是什么\"><a class=\"anchor\" href=\"#一-gpio是什么\">#</a> 一、GPIO 是什么？</h4>\n<p>GPIO 全称 General Purpose Input Output 即通用输入 / 输出，其实 GPIO 的本质就是芯片的一个引脚，通常在 ARM 中所有的 I/O 都是通用的。不过由于每个开发板上都会设计不同的外围电路，这就造成 GPIO 的功能可能有所不同，大部分 GPIO 都是有复用功能的，比如有些 GPIO 可能是串口的 TX 或 RX，也可能是 I2C 的 SCL 或 SDA 线。</p>\n<p>所以我们不仅要知道 GPIO 能够输出高低电平，还要理解为什么有些 GPIO 可以复用某些功能，而其他的不可以。</p>\n<h4 id=\"二-gpio内部结构\"><a class=\"anchor\" href=\"#二-gpio内部结构\">#</a> 二、GPIO 内部结构</h4>\n<p><img data-src=\"GPIO%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt=\"GPIO结构图\"></p>\n<h5 id=\"我们首先分析上面的结构电路\"><a class=\"anchor\" href=\"#我们首先分析上面的结构电路\">#</a> <strong>我们首先分析上面的结构电路：</strong></h5>\n<p><strong>1、保护二极管</strong>： 保护二极管从它的名字就不难想到他是用来对系统进行保护的，通过两个二极管的导通可以防止引脚外部输入电压过低或过高。当电压过高时，上方的保护二极管导通。当电压过低时，下方的二极管导通，防止不正常电压导入到芯片内部造成芯片烧毁。</p>\n<p><strong>2、P・MOS 管和 N・MOS 管</strong>： GPIO 经过两个二极管的保护后向上流入输入模式，向下流入输出模式，而输出模式的控制是由一个由 P・MOS 管和 N・MOS 管组成的单元电路，该电路主要是控制输出的模式，由该结构狗策划给你的单元电路具有推挽输出和开漏输出两种模式。</p>\n<p><strong>当系统配置为推挽输出模式时：</strong></p>\n<ul>\n<li>\n<p>若向该结构中输入高电平，经过反向后，上方的 P-MOS 导通，下方的 N-MOS 关闭，对外输出高电平；</p>\n</li>\n<li>\n<p>若向该结构中输入低电平时，经过反向后，下方的 N-MOS 管导通，上方的 P-MOS 关闭，对外输出低电平。</p>\n</li>\n<li>\n<p>当引脚高低电平切换时，两个 MOS 管轮流导通，P 管负责灌电流，N 管负责拉电流，使其负载能力和开关速度都比普通的方式有很大的提高。推挽输出的低电平为 0V，高电平为 3.3V。</p>\n</li>\n</ul>\n<p><strong>当系统配置为开漏输出模式时：</strong></p>\n<ul>\n<li>\n<p>上方的 P-MOS 管完全不工作；</p>\n</li>\n<li>\n<p>如果我们控制输出为 0，低电平，则 P-MOS 管关闭，N-MOS 管导通，使输出接地；</p>\n</li>\n<li>\n<p>若控制输出为 1（它无法直接输出高电平）时，则 P-MOS 管和 N-MOS 管都关闭，所以开漏输出模式下引脚既不输出高电平，也不输出低电平，为高阻态。</p>\n</li>\n</ul>\n<p><strong>推挽输出模式</strong>一般应用在输出电平为 0 和 3.3V 而且需要高速切换开关状态的场合。</p>\n<p><strong>开漏输出模式</strong>一般应用在 I2C、SMBUS 通信等需要 线与功能的总线电路中。</p>\n<p><strong>在单片机中除了必须用开漏模式的场合，一般习惯使用推挽输出模式</strong></p>\n<p><strong>3、输出数据寄存器</strong>：前面我们知道双了 MOS 管结构电路的输入信号，是由 GPIO 输出数据寄存器 GPIOx_ODR 提供的，因此我们可以通过修改输出数据寄存器的值，就可以修改 GPIO 引脚的输出电平。而置位 / 复位寄存器 GPIOx_BSRR 可以通过修改输出数据寄存器的值，从而影响电路的输出。</p>\n<p><strong>4、复用功能输出</strong>：复用功能输出中的复用是指 STM32 的其他片上外设对 GPIO 引脚进行控制，此时 GPIO 引脚用作该外设功能的一部分，算是第二用途。从其他外设引出来的复用功能输出信号与 GPIO 本身的数据寄存器都连接到双 MOS 管结构的输入中。</p>\n<h4 id=\"三-输入输出模式\"><a class=\"anchor\" href=\"#三-输入输出模式\">#</a> 三、输入输出模式</h4>\n<h5 id=\"gpio八种模式\"><a class=\"anchor\" href=\"#gpio八种模式\">#</a> <strong>GPIO 八种模式</strong></h5>\n<table>\n<thead>\n<tr>\n<th><strong>模式</strong></th>\n<th></th>\n<th><strong>介绍</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>浮空输入</td>\n<td>GPIO_Mode_IN_FLOATING</td>\n<td>若引脚悬空，则电平不确定</td>\n</tr>\n<tr>\n<td>上拉输入</td>\n<td>GPIO_Mode_IPU</td>\n<td>内部连接上拉电阻，悬空时默认高电平</td>\n</tr>\n<tr>\n<td>下拉输入</td>\n<td>GPIO_Mode_IPD</td>\n<td>内部连接下拉电阻，悬空时默认低电平</td>\n</tr>\n<tr>\n<td>模拟输入</td>\n<td>GPIO_Mode_AIN</td>\n<td>GPIO 无效，引脚直接接入内部 ADC</td>\n</tr>\n<tr>\n<td>开漏输出</td>\n<td>GPIO_Mode_Out_OD</td>\n<td>高电平为高阻态，低电平接 VSS（负极）</td>\n</tr>\n<tr>\n<td>推挽输出</td>\n<td>GPIO_Mode_Out_PP</td>\n<td>高电平接 VDD，低电平接 VSS</td>\n</tr>\n<tr>\n<td>复用开漏输出</td>\n<td>GPIO_Mode_AF_OD</td>\n<td>由片上外设控制，高电平为高阻态，低电平接 VSS</td>\n</tr>\n<tr>\n<td>复用推挽输出</td>\n<td>GPIO_Mode_AF_PP</td>\n<td>由片上外设控制，高电平接 VDD，低电平接 VSS</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"浮空输入\"><a class=\"anchor\" href=\"#浮空输入\">#</a> 浮空输入</h5>\n<p>浮空输入模式下， <code>I/O</code>  端口的电平信号直接进入输入数据寄存器。也就是说，I/O 的电平状态是不确定的，完全由外部输入决定；如果在该引脚悬空（在无信号输入）的情况下，读取该端口的电平是不确定的，通常用于 <code>IIC</code> 、 <code>USART</code>  等总线设备上。</p>\n<p><img data-src=\"image-20231125013402022.png\" alt=\"image-20231125013402022\"></p>\n<h5 id=\"上拉输入模式\"><a class=\"anchor\" href=\"#上拉输入模式\">#</a> 上拉输入模式</h5>\n<p>上拉输入模式下， <code>I/O</code>  端口的电平信号直接进入输入数据寄存器。但是在 <code>I/O</code>  端口悬空（在无信号输入）的情况下，输入端的电平保持在高电平（并且在 <code>I/O</code>  端口输入为低电平的时候，输入端的电平也是低电平）</p>\n<p><img data-src=\"image-20231125013449506.png\" alt=\"image-20231125013449506\"></p>\n<h5 id=\"下拉输入模式\"><a class=\"anchor\" href=\"#下拉输入模式\">#</a> 下拉输入模式</h5>\n<p>下拉输入模式下， <code>I/O</code>  端口的电平信号直接进入输入数据寄存器。但是在 <code>I/O</code>  端口悬空（在无信号输入）的情况下，输入端的电平保持在低电平；并且在 I/O 端口输入为高电平的时候，输入端的电平也是高电平。</p>\n<p><img data-src=\"image-20231125013542238.png\" alt=\"image-20231125013542238\"></p>\n<h5 id=\"模拟输入模式\"><a class=\"anchor\" href=\"#模拟输入模式\">#</a> 模拟输入模式</h5>\n<p>模拟输入模式下， <code>I/O</code>  端口的模拟信号（电压信号，而非电平信号）直接模拟输入到片上外设模块，比如 <code>ADC</code>  模块等。</p>\n<p><img data-src=\"image-20231125013643774.png\" alt=\"image-20231125013643774\"></p>\n<h5 id=\"开漏输出模式\"><a class=\"anchor\" href=\"#开漏输出模式\">#</a> 开漏输出模式</h5>\n<p>当系统配置为开漏输出模式时：</p>\n<ul>\n<li>\n<p>上方的 P-MOS 管完全不工作；</p>\n</li>\n<li>\n<p>如果我们控制输出为 0，低电平，则 P-MOS 管关闭，N-MOS 管导通，使输出接地；</p>\n</li>\n<li>\n<p>若控制输出为 1（它无法直接输出高电平）时，则 P-MOS 管和 N-MOS 管都关闭，所以开漏输出模式下引脚既不输出高电平，也不输出低电平，为高阻态。</p>\n</li>\n</ul>\n<h5 id=\"开漏复用输出模式\"><a class=\"anchor\" href=\"#开漏复用输出模式\">#</a> 开漏复用输出模式</h5>\n<p>开漏复用输出模式，与开漏输出模式很是类似。只是输出的高低电平的来源，不是让 CPU 直接写输出数据寄存器，取而代之利用片上外设模块的复用功能输出来决定的，一般用于片内外设功能： <code>TX1，MOSI，MISO，SCK，SS</code></p>\n<h5 id=\"推挽输出模式\"><a class=\"anchor\" href=\"#推挽输出模式\">#</a> 推挽输出模式</h5>\n<p>当系统配置为推挽输出模式时：</p>\n<ul>\n<li>\n<p>若向该结构中输入高电平，经过反向后，上方的 P-MOS 导通，下方的 N-MOS 关闭，对外输出高电平；</p>\n</li>\n<li>\n<p>若向该结构中输入低电平时，经过反向后，下方的 N-MOS 管导通，上方的 P-MOS 关闭，对外输出低电平。</p>\n</li>\n<li>\n<p>当引脚高低电平切换时，两个 MOS 管轮流导通，P 管负责灌电流，N 管负责拉电流，使其负载能力和开关速度都比普通的方式有很大的提高。推挽输出的低电平为 0V，高电平为 3.3V。</p>\n</li>\n</ul>\n<h5 id=\"推挽复用输出模式\"><a class=\"anchor\" href=\"#推挽复用输出模式\">#</a> 推挽复用输出模式</h5>\n<p>推挽复用输出模式，与推挽输出模式很是类似。只是输出的高低电平的来源，不是让 CPU 直接写输出数据寄存器，而是利用片上外设模块的复用功能输出来决定的，常见采用推挽输出模式的一般为片内外设功能 <code>IIC</code>  的 <code>SCL</code> 、 <code>SDL</code> 。</p>\n<p><img data-src=\"image-20231125014016489.png\" alt=\"image-20231125014016489\"></p>\n<h4 id=\"四-开漏输出和推挽输出的区别\"><a class=\"anchor\" href=\"#四-开漏输出和推挽输出的区别\">#</a> 四、开漏输出和推挽输出的区别</h4>\n<p>开漏输出和推挽输出模式的区别主要是开漏输出<strong>只可以输出强低电平，高电平得靠外部电阻拉高</strong>。输出端相当于三极管的集电极，适合于做电流型的驱动，其吸收电流的能力相对强 (一般 20ma 以内)；推挽输出<strong>可以输出强高、低电平</strong>，连接数字器件。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>推挽输出</th>\n<th>开漏输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>高电平驱动能力</td>\n<td>强</td>\n<td>由外部上拉电阻提供</td>\n</tr>\n<tr>\n<td>低电平驱动能力</td>\n<td>强</td>\n<td>强</td>\n</tr>\n<tr>\n<td>电平跳变速度</td>\n<td>快</td>\n<td>由外部上拉电阻决定，电阻越小，反应越快，功耗越大</td>\n</tr>\n<tr>\n<td>线与功能</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>电平转换</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"五-stm32中gpio的配置\"><a class=\"anchor\" href=\"#五-stm32中gpio的配置\">#</a> 五、STM32 中 GPIO 的配置</h4>\n<p>初始化 GPIO 的常用格式是：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GPIO_InitTypeDef GPIO_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_5<span class=\"token punctuation\">;</span> <span class=\"token comment\">//LED0-- PB.5 端口配置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_Out_PP<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 推挽输出</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span><span class=\"token comment\">// 速度 50MHz</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 根据设定参数配置 GPIO</span></pre></td></tr></table></figure><p><code>IO</code>  口速度设置有三个可选值：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GPIO_Speed_10MHz<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>GPIO_Speed_2MHz<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>GPIO_Speed_50MHz</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>GPIOSpeed_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>模式则有 8 个可选定义如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> GPIO_Mode_AIN <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 模拟输入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GPIO_Mode_IN_FLOATING <span class=\"token operator\">=</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 浮空输入</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>GPIO_Mode_IPD <span class=\"token operator\">=</span> <span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 下拉输入</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>GPIO_Mode_IPU <span class=\"token operator\">=</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 上拉输入</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>GPIO_Mode_Out_OD <span class=\"token operator\">=</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 开漏输出</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>GPIO_Mode_Out_PP <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 通用推挽输出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>GPIO_Mode_AF_OD <span class=\"token operator\">=</span> <span class=\"token number\">0x1C</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 复用开漏输出</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>GPIO_Mode_AF_PP <span class=\"token operator\">=</span> <span class=\"token number\">0x18</span> <span class=\"token comment\">// 复用推挽</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span>GPIOMode_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>名词解释：</strong></p>\n<p>高阻态：是一个数字电路里常见的术语，指的是电路的一种输出状态，既不是高电平也不是低电平，如果高阻态再输入下一级电路的话，对下级电路无任何影响，和没接一样，如果用万用表测的话有可能是高电平也有可能是低电平，随它后面接的东西定的。电路分析时高阻态可做开路理解。你可以把它看作输出（输入）电阻非常大。它的极限状态可以认为悬空（开路）。也就是说理论上高阻态不是悬空，它是对地或对电源电阻极大的状态。而实际应用上与引脚的悬空几乎是一样的。</p>\n",
            "tags": [
                "stm32单片机",
                "stm32"
            ]
        },
        {
            "id": "https://littlestory1.github.io/2023/11/21/stm32/stm32%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/",
            "url": "https://littlestory1.github.io/2023/11/21/stm32/stm32%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/",
            "title": "stm32前言",
            "date_published": "2023-11-21T14:38:11.000Z",
            "content_html": "<p><strong>前言</strong></p>\n<p>主要用于记录 stm32 的知识点以及学习过程，这样慢慢积累下来，会有莫名的成就感</p>\n<p>如果有误，欢迎加我 qq 指出错误</p>\n<p><strong>使用板子：</strong></p>\n<p>stm32f103c8t6 最小系统板</p>\n<p><strong>stm32 三种开发方式的区别</strong></p>\n<ul>\n<li><strong>寄存器模式</strong>：最底层的开发，运行速度最快。实际上也是使用了固件库，但是不是使用固件库的函数，而是使用了固件库的定义，包括宏定义，结构体定义。和 51 的开发差不多，但因为 32 的寄存器太多，实际开发手动配置大量寄存器极其耗费时间，同时在没有注释的情况下可读性差，所以较少使用。</li>\n<li><strong>标准库模式</strong>：基于寄存器进行了函数的封装，而由于函数封装以及内部大量的检查参数有效性的代码，运行速度相对于寄存器模式较慢。封装之后可以根据函数名字就能明白代码作用，容易记忆，使用方便，所以较多人使用。</li>\n<li><strong>HAL 库模式</strong>：全称是 Hardware Abstraction Layer（抽象印象层），相比于标准库更加深入的封装，有句柄、回调函数等概念，因此相对于标准库模式有更好的可移植性（可在不同芯片的移植），但代价就是更多的性能损失。</li>\n</ul>\n<p><strong>本系列采用标准库模式</strong></p>\n",
            "tags": [
                "stm32单片机",
                "stm32"
            ]
        },
        {
            "id": "https://littlestory1.github.io/2023/11/21/note/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "url": "https://littlestory1.github.io/2023/11/21/note/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "title": "第一篇博客",
            "date_published": "2023-11-21T14:23:55.000Z",
            "content_html": "<p>觉得原本的博客主题过于花里胡哨，于是换了个主题，然后把全部文章删了，重新整理，重新写</p>\n",
            "tags": [
                "杂谈",
                "杂谈"
            ]
        }
    ]
}