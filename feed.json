{
    "version": "https://jsonfeed.org/version/1",
    "title": "昨日已逝，明日未知，而今日为金",
    "subtitle": "",
    "icon": "https://littlestory1.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://littlestory1.github.io",
    "items": [
        {
            "id": "https://littlestory1.github.io/2023/11/24/stm32/stm32-GPIO/",
            "url": "https://littlestory1.github.io/2023/11/24/stm32/stm32-GPIO/",
            "title": "stm32(GPIO)",
            "date_published": "2023-11-24T12:57:49.000Z",
            "content_html": "<h4 id=\"首先我们先来学习如何开时钟\"><a class=\"anchor\" href=\"#首先我们先来学习如何开时钟\">#</a> <strong>首先我们先来学习如何开时钟：</strong></h4>\n<h5 id=\"1为什么需要开时钟\"><a class=\"anchor\" href=\"#1为什么需要开时钟\">#</a> <strong>1：为什么需要开时钟？</strong></h5>\n<p>我们可以通俗的理解时钟是外设电路的心脏，不打开时钟就无法使用。每个外设都有独立时钟，如果不打开时钟外设就不能用，原因就是为了低功耗节省用电，不用的外设可以不打开时钟</p>\n<h5 id=\"2如何开启对应时钟\"><a class=\"anchor\" href=\"#2如何开启对应时钟\">#</a> <strong>2：如何开启对应时钟？</strong></h5>\n<p>首先，我们需要看芯片对应的外设总线架构图</p>\n<p><img data-src=\"%E6%80%BB%E7%BA%BF%E6%9E%B6%E6%9E%84.jpg\" alt=\"总线架构\"></p>\n<p>假设我们现在需要开 GPIOA 的时钟，我们可以看到 GPIOA 是在 APB2 外设总线上的，那么开启 GPIOA 时钟代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_GPIOA<span class=\"token punctuation\">,</span> ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>关闭时钟代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_GPIOA<span class=\"token punctuation\">,</span> DISENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"一-gpio是什么\"><a class=\"anchor\" href=\"#一-gpio是什么\">#</a> 一、GPIO 是什么？</h4>\n<p>GPIO 全称 General Purpose Input Output 即通用输入 / 输出，其实 GPIO 的本质就是芯片的一个引脚，通常在 ARM 中所有的 I/O 都是通用的。不过由于每个开发板上都会设计不同的外围电路，这就造成 GPIO 的功能可能有所不同，大部分 GPIO 都是有复用功能的，比如有些 GPIO 可能是串口的 TX 或 RX，也可能是 I2C 的 SCL 或 SDA 线。</p>\n<p>所以我们不仅要知道 GPIO 能够输出高低电平，还要理解为什么有些 GPIO 可以复用某些功能，而其他的不可以。</p>\n<h4 id=\"二-gpio内部结构\"><a class=\"anchor\" href=\"#二-gpio内部结构\">#</a> 二、GPIO 内部结构</h4>\n<p><img data-src=\"GPIO%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt=\"GPIO结构图\"></p>\n<h5 id=\"我们首先分析上面的结构电路\"><a class=\"anchor\" href=\"#我们首先分析上面的结构电路\">#</a> <strong>我们首先分析上面的结构电路：</strong></h5>\n<p><strong>1、保护二极管</strong>： 保护二极管从它的名字就不难想到他是用来对系统进行保护的，通过两个二极管的导通可以防止引脚外部输入电压过低或过高。当电压过高时，上方的保护二极管导通。当电压过低时，下方的二极管导通，防止不正常电压导入到芯片内部造成芯片烧毁。</p>\n<p><strong>2、P・MOS 管和 N・MOS 管</strong>： GPIO 经过两个二极管的保护后向上流入输入模式，向下流入输出模式，而输出模式的控制是由一个由 P・MOS 管和 N・MOS 管组成的单元电路，该电路主要是控制输出的模式，由该结构狗策划给你的单元电路具有推挽输出和开漏输出两种模式。</p>\n<p><strong>当系统配置为推挽输出模式时：</strong></p>\n<ul>\n<li>\n<p>若向该结构中输入高电平，经过反向后，上方的 P-MOS 导通，下方的 N-MOS 关闭，对外输出高电平；</p>\n</li>\n<li>\n<p>若向该结构中输入低电平时，经过反向后，下方的 N-MOS 管导通，上方的 P-MOS 关闭，对外输出低电平。</p>\n</li>\n<li>\n<p>当引脚高低电平切换时，两个 MOS 管轮流导通，P 管负责灌电流，N 管负责拉电流，使其负载能力和开关速度都比普通的方式有很大的提高。推挽输出的低电平为 0V，高电平为 3.3V。</p>\n</li>\n</ul>\n<p><strong>当系统配置为开漏输出模式时：</strong></p>\n<ul>\n<li>\n<p>上方的 P-MOS 管完全不工作；</p>\n</li>\n<li>\n<p>如果我们控制输出为 0，低电平，则 P-MOS 管关闭，N-MOS 管导通，使输出接地；</p>\n</li>\n<li>\n<p>若控制输出为 1（它无法直接输出高电平）时，则 P-MOS 管和 N-MOS 管都关闭，所以开漏输出模式下引脚既不输出高电平，也不输出低电平，为高阻态。</p>\n</li>\n</ul>\n<p><strong>推挽输出模式</strong>一般应用在输出电平为 0 和 3.3V 而且需要高速切换开关状态的场合。</p>\n<p><strong>开漏输出模式</strong>一般应用在 I2C、SMBUS 通信等需要 线与功能的总线电路中。</p>\n<p><strong>在单片机中除了必须用开漏模式的场合，一般习惯使用推挽输出模式</strong></p>\n<p><strong>3、输出数据寄存器</strong>：前面我们知道双了 MOS 管结构电路的输入信号，是由 GPIO 输出数据寄存器 GPIOx_ODR 提供的，因此我们可以通过修改输出数据寄存器的值，就可以修改 GPIO 引脚的输出电平。而置位 / 复位寄存器 GPIOx_BSRR 可以通过修改输出数据寄存器的值，从而影响电路的输出。</p>\n<p><strong>4、复用功能输出</strong>：复用功能输出中的复用是指 STM32 的其他片上外设对 GPIO 引脚进行控制，此时 GPIO 引脚用作该外设功能的一部分，算是第二用途。从其他外设引出来的复用功能输出信号与 GPIO 本身的数据寄存器都连接到双 MOS 管结构的输入中。</p>\n<h4 id=\"三-输入输出模式\"><a class=\"anchor\" href=\"#三-输入输出模式\">#</a> 三、输入输出模式</h4>\n<h5 id=\"gpio八种模式\"><a class=\"anchor\" href=\"#gpio八种模式\">#</a> <strong>GPIO 八种模式</strong></h5>\n<table>\n<thead>\n<tr>\n<th><strong>模式</strong></th>\n<th></th>\n<th><strong>介绍</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>浮空输入</td>\n<td>GPIO_Mode_IN_FLOATING</td>\n<td>若引脚悬空，则电平不确定</td>\n</tr>\n<tr>\n<td>上拉输入</td>\n<td>GPIO_Mode_IPU</td>\n<td>内部连接上拉电阻，悬空时默认高电平</td>\n</tr>\n<tr>\n<td>下拉输入</td>\n<td>GPIO_Mode_IPD</td>\n<td>内部连接下拉电阻，悬空时默认低电平</td>\n</tr>\n<tr>\n<td>模拟输入</td>\n<td>GPIO_Mode_AIN</td>\n<td>GPIO 无效，引脚直接接入内部 ADC</td>\n</tr>\n<tr>\n<td>开漏输出</td>\n<td>GPIO_Mode_Out_OD</td>\n<td>高电平为高阻态，低电平接 VSS（负极）</td>\n</tr>\n<tr>\n<td>推挽输出</td>\n<td>GPIO_Mode_Out_PP</td>\n<td>高电平接 VDD，低电平接 VSS</td>\n</tr>\n<tr>\n<td>复用开漏输出</td>\n<td>GPIO_Mode_AF_OD</td>\n<td>由片上外设控制，高电平为高阻态，低电平接 VSS</td>\n</tr>\n<tr>\n<td>复用推挽输出</td>\n<td>GPIO_Mode_AF_PP</td>\n<td>由片上外设控制，高电平接 VDD，低电平接 VSS</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"浮空输入\"><a class=\"anchor\" href=\"#浮空输入\">#</a> 浮空输入</h5>\n<p>浮空输入模式下， <code>I/O</code>  端口的电平信号直接进入输入数据寄存器。也就是说，I/O 的电平状态是不确定的，完全由外部输入决定；如果在该引脚悬空（在无信号输入）的情况下，读取该端口的电平是不确定的，通常用于 <code>IIC</code> 、 <code>USART</code>  等总线设备上。</p>\n<p><img data-src=\"image-20231125013402022.png\" alt=\"image-20231125013402022\"></p>\n<h5 id=\"上拉输入模式\"><a class=\"anchor\" href=\"#上拉输入模式\">#</a> 上拉输入模式</h5>\n<p>上拉输入模式下， <code>I/O</code>  端口的电平信号直接进入输入数据寄存器。但是在 <code>I/O</code>  端口悬空（在无信号输入）的情况下，输入端的电平保持在高电平（并且在 <code>I/O</code>  端口输入为低电平的时候，输入端的电平也是低电平）</p>\n<p><img data-src=\"image-20231125013449506.png\" alt=\"image-20231125013449506\"></p>\n<h5 id=\"下拉输入模式\"><a class=\"anchor\" href=\"#下拉输入模式\">#</a> 下拉输入模式</h5>\n<p>下拉输入模式下， <code>I/O</code>  端口的电平信号直接进入输入数据寄存器。但是在 <code>I/O</code>  端口悬空（在无信号输入）的情况下，输入端的电平保持在低电平；并且在 I/O 端口输入为高电平的时候，输入端的电平也是高电平。</p>\n<p><img data-src=\"image-20231125013542238.png\" alt=\"image-20231125013542238\"></p>\n<h5 id=\"模拟输入模式\"><a class=\"anchor\" href=\"#模拟输入模式\">#</a> 模拟输入模式</h5>\n<p>模拟输入模式下， <code>I/O</code>  端口的模拟信号（电压信号，而非电平信号）直接模拟输入到片上外设模块，比如 <code>ADC</code>  模块等。</p>\n<p><img data-src=\"image-20231125013643774.png\" alt=\"image-20231125013643774\"></p>\n<h5 id=\"开漏输出模式\"><a class=\"anchor\" href=\"#开漏输出模式\">#</a> 开漏输出模式</h5>\n<p>当系统配置为开漏输出模式时：</p>\n<ul>\n<li>\n<p>上方的 P-MOS 管完全不工作；</p>\n</li>\n<li>\n<p>如果我们控制输出为 0，低电平，则 P-MOS 管关闭，N-MOS 管导通，使输出接地；</p>\n</li>\n<li>\n<p>若控制输出为 1（它无法直接输出高电平）时，则 P-MOS 管和 N-MOS 管都关闭，所以开漏输出模式下引脚既不输出高电平，也不输出低电平，为高阻态。</p>\n</li>\n</ul>\n<h5 id=\"开漏复用输出模式\"><a class=\"anchor\" href=\"#开漏复用输出模式\">#</a> 开漏复用输出模式</h5>\n<p>开漏复用输出模式，与开漏输出模式很是类似。只是输出的高低电平的来源，不是让 CPU 直接写输出数据寄存器，取而代之利用片上外设模块的复用功能输出来决定的，一般用于片内外设功能： <code>TX1，MOSI，MISO，SCK，SS</code></p>\n<h5 id=\"推挽输出模式\"><a class=\"anchor\" href=\"#推挽输出模式\">#</a> 推挽输出模式</h5>\n<p>当系统配置为推挽输出模式时：</p>\n<ul>\n<li>\n<p>若向该结构中输入高电平，经过反向后，上方的 P-MOS 导通，下方的 N-MOS 关闭，对外输出高电平；</p>\n</li>\n<li>\n<p>若向该结构中输入低电平时，经过反向后，下方的 N-MOS 管导通，上方的 P-MOS 关闭，对外输出低电平。</p>\n</li>\n<li>\n<p>当引脚高低电平切换时，两个 MOS 管轮流导通，P 管负责灌电流，N 管负责拉电流，使其负载能力和开关速度都比普通的方式有很大的提高。推挽输出的低电平为 0V，高电平为 3.3V。</p>\n</li>\n</ul>\n<h5 id=\"推挽复用输出模式\"><a class=\"anchor\" href=\"#推挽复用输出模式\">#</a> 推挽复用输出模式</h5>\n<p>推挽复用输出模式，与推挽输出模式很是类似。只是输出的高低电平的来源，不是让 CPU 直接写输出数据寄存器，而是利用片上外设模块的复用功能输出来决定的，常见采用推挽输出模式的一般为片内外设功能 <code>IIC</code>  的 <code>SCL</code> 、 <code>SDL</code> 。</p>\n<p><img data-src=\"image-20231125014016489.png\" alt=\"image-20231125014016489\"></p>\n<h4 id=\"四-开漏输出和推挽输出的区别\"><a class=\"anchor\" href=\"#四-开漏输出和推挽输出的区别\">#</a> 四、开漏输出和推挽输出的区别</h4>\n<p>开漏输出和推挽输出模式的区别主要是开漏输出<strong>只可以输出强低电平，高电平得靠外部电阻拉高</strong>。输出端相当于三极管的集电极，适合于做电流型的驱动，其吸收电流的能力相对强 (一般 20ma 以内)；推挽输出<strong>可以输出强高、低电平</strong>，连接数字器件。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>推挽输出</th>\n<th>开漏输出</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>高电平驱动能力</td>\n<td>强</td>\n<td>由外部上拉电阻提供</td>\n</tr>\n<tr>\n<td>低电平驱动能力</td>\n<td>强</td>\n<td>强</td>\n</tr>\n<tr>\n<td>电平跳变速度</td>\n<td>快</td>\n<td>由外部上拉电阻决定，电阻越小，反应越快，功耗越大</td>\n</tr>\n<tr>\n<td>线与功能</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>电平转换</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"五-stm32中gpio的配置\"><a class=\"anchor\" href=\"#五-stm32中gpio的配置\">#</a> 五、STM32 中 GPIO 的配置</h4>\n<p>初始化 GPIO 的常用格式是：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GPIO_InitTypeDef GPIO_InitStructure<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_5<span class=\"token punctuation\">;</span> <span class=\"token comment\">//LED0-- PB.5 端口配置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_Out_PP<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 推挽输出</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span><span class=\"token comment\">// 速度 50MHz</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOB<span class=\"token punctuation\">,</span> GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 根据设定参数配置 GPIO</span></pre></td></tr></table></figure><p><code>IO</code>  口速度设置有三个可选值：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GPIO_Speed_10MHz<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>GPIO_Speed_2MHz<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>GPIO_Speed_50MHz</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>GPIOSpeed_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>模式则有 8 个可选定义如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> GPIO_Mode_AIN <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 模拟输入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>GPIO_Mode_IN_FLOATING <span class=\"token operator\">=</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 浮空输入</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>GPIO_Mode_IPD <span class=\"token operator\">=</span> <span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 下拉输入</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>GPIO_Mode_IPU <span class=\"token operator\">=</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 上拉输入</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>GPIO_Mode_Out_OD <span class=\"token operator\">=</span> <span class=\"token number\">0x14</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 开漏输出</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>GPIO_Mode_Out_PP <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 通用推挽输出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>GPIO_Mode_AF_OD <span class=\"token operator\">=</span> <span class=\"token number\">0x1C</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 复用开漏输出</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>GPIO_Mode_AF_PP <span class=\"token operator\">=</span> <span class=\"token number\">0x18</span> <span class=\"token comment\">// 复用推挽</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span>GPIOMode_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>名词解释：</strong></p>\n<p>高阻态：是一个数字电路里常见的术语，指的是电路的一种输出状态，既不是高电平也不是低电平，如果高阻态再输入下一级电路的话，对下级电路无任何影响，和没接一样，如果用万用表测的话有可能是高电平也有可能是低电平，随它后面接的东西定的。电路分析时高阻态可做开路理解。你可以把它看作输出（输入）电阻非常大。它的极限状态可以认为悬空（开路）。也就是说理论上高阻态不是悬空，它是对地或对电源电阻极大的状态。而实际应用上与引脚的悬空几乎是一样的。</p>\n",
            "tags": [
                "stm32单片机",
                "stm32"
            ]
        },
        {
            "id": "https://littlestory1.github.io/2023/11/21/stm32/stm32%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/",
            "url": "https://littlestory1.github.io/2023/11/21/stm32/stm32%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/",
            "title": "stm32前言",
            "date_published": "2023-11-21T14:38:11.000Z",
            "content_html": "<p><strong>前言</strong></p>\n<p>主要用于记录 stm32 的知识点以及学习过程，这样慢慢积累下来，会有莫名的成就感</p>\n<p>如果有误，欢迎加我 qq 指出错误</p>\n<p><strong>使用板子：</strong></p>\n<p>stm32f103c8t6 最小系统板</p>\n<p><strong>stm32 三种开发方式的区别</strong></p>\n<ul>\n<li><strong>寄存器模式</strong>：最底层的开发，运行速度最快。实际上也是使用了固件库，但是不是使用固件库的函数，而是使用了固件库的定义，包括宏定义，结构体定义。和 51 的开发差不多，但因为 32 的寄存器太多，实际开发手动配置大量寄存器极其耗费时间，同时在没有注释的情况下可读性差，所以较少使用。</li>\n<li><strong>标准库模式</strong>：基于寄存器进行了函数的封装，而由于函数封装以及内部大量的检查参数有效性的代码，运行速度相对于寄存器模式较慢。封装之后可以根据函数名字就能明白代码作用，容易记忆，使用方便，所以较多人使用。</li>\n<li><strong>HAL 库模式</strong>：全称是 Hardware Abstraction Layer（抽象印象层），相比于标准库更加深入的封装，有句柄、回调函数等概念，因此相对于标准库模式有更好的可移植性（可在不同芯片的移植），但代价就是更多的性能损失。</li>\n</ul>\n<p><strong>本系列采用标准库模式</strong></p>\n",
            "tags": [
                "stm32单片机",
                "stm32"
            ]
        },
        {
            "id": "https://littlestory1.github.io/2023/11/21/note/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "url": "https://littlestory1.github.io/2023/11/21/note/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/",
            "title": "第一篇博客",
            "date_published": "2023-11-21T14:23:55.000Z",
            "content_html": "<p>觉得原本的博客主题过于花里胡哨，于是换了个主题，然后把全部文章删了，重新整理，重新写</p>\n",
            "tags": [
                "杂谈",
                "杂谈"
            ]
        }
    ]
}