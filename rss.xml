<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>昨日已逝，明日未知，而今日为金</title>
        <subtitle></subtitle>
        <icon>https://littlestory1.github.io/images/favicon.ico</icon>
        <link>https://littlestory1.github.io</link>
        <author>
          <name>alittlestory</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Fri, 24 Nov 2023 20:57:49 +0800</pubDate>
        <lastBuildDate>Fri, 24 Nov 2023 20:57:49 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://littlestory1.github.io/2023/11/24/stm32/stm32-GPIO/</guid>
            <title>stm32(GPIO)</title>
            <link>https://littlestory1.github.io/2023/11/24/stm32/stm32-GPIO/</link>
            <category term="stm32单片机" scheme="https://littlestory1.github.io/categories/stm32/" />
            <category term="stm32" scheme="https://littlestory1.github.io/tags/stm32/" />
            <pubDate>Fri, 24 Nov 2023 20:57:49 +0800</pubDate>
            <description><![CDATA[ &lt;h4 id=&#34;首先我们先来学习如何开时钟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#首先我们先来学习如何开时钟&#34;&gt;#&lt;/a&gt; &lt;strong&gt;首先我们先来学习如何开时钟：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1：为什么需要开时钟？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以通俗的理解时钟是外设电路的心脏，不打开时钟就无法使用。每个外设都有独立时钟，如果不打开时钟外设就不能用，原因就是为了低功耗节省用电，不用的外设可以不打开时钟&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2：如何开启对应时钟？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，我们需要看芯片对应的外设总线架构图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%80%BB%E7%BA%BF%E6%9E%B6%E6%9E%84.jpg&#34; alt=&#34;总线架构&#34;&gt;&lt;/p&gt;
&lt;p&gt;假设我们现在需要开 GPIOA 的时钟，我们可以看到 GPIOA 是在 APB2 外设总线上的，那么开启 GPIOA 时钟代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;RCC_APB2PeriphClockCmd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;RCC_APB2Periph_GPIOA&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ENABLE&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;关闭时钟代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;RCC_APB2PeriphClockCmd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;RCC_APB2Periph_GPIOA&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; DISENABLE&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;一-gpio是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-gpio是什么&#34;&gt;#&lt;/a&gt; 一、GPIO 是什么？&lt;/h4&gt;
&lt;p&gt;GPIO 全称 General Purpose Input Output 即通用输入 / 输出，其实 GPIO 的本质就是芯片的一个引脚，通常在 ARM 中所有的 I/O 都是通用的。不过由于每个开发板上都会设计不同的外围电路，这就造成 GPIO 的功能可能有所不同，大部分 GPIO 都是有复用功能的，比如有些 GPIO 可能是串口的 TX 或 RX，也可能是 I2C 的 SCL 或 SDA 线。&lt;/p&gt;
&lt;p&gt;所以我们不仅要知道 GPIO 能够输出高低电平，还要理解为什么有些 GPIO 可以复用某些功能，而其他的不可以。&lt;/p&gt;
&lt;h4 id=&#34;二-gpio内部结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-gpio内部结构&#34;&gt;#&lt;/a&gt; 二、GPIO 内部结构&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;GPIO%E7%BB%93%E6%9E%84%E5%9B%BE.jpg&#34; alt=&#34;GPIO结构图&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们首先分析上面的结构电路：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、保护二极管&lt;/strong&gt;： 保护二极管从它的名字就不难想到他是用来对系统进行保护的，通过两个二极管的导通可以防止引脚外部输入电压过低或过高。当电压过高时，上方的保护二极管导通。当电压过低时，下方的二极管导通，防止不正常电压导入到芯片内部造成芯片烧毁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、P・MOS 管和 N・MOS 管&lt;/strong&gt;： GPIO 经过两个二极管的保护后向上流入输入模式，向下流入输出模式，而输出模式的控制是由一个由 P・MOS 管和 N・MOS 管组成的单元电路，该电路主要是控制输出的模式，由该结构狗策划给你的单元电路具有推挽输出和开漏输出两种模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当系统配置为推挽输出模式时：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若向该结构中输入高电平，经过反向后，上方的 P-MOS 导通，下方的 N-MOS 关闭，对外输出高电平；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若向该结构中输入低电平时，经过反向后，下方的 N-MOS 管导通，上方的 P-MOS 关闭，对外输出低电平。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当引脚高低电平切换时，两个 MOS 管轮流导通，P 管负责灌电流，N 管负责拉电流，使其负载能力和开关速度都比普通的方式有很大的提高。推挽输出的低电平为 0V，高电平为 3.3V。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;当系统配置为开漏输出模式时：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上方的 P-MOS 管完全不工作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果我们控制输出为 0，低电平，则 P-MOS 管关闭，N-MOS 管导通，使输出接地；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若控制输出为 1（它无法直接输出高电平）时，则 P-MOS 管和 N-MOS 管都关闭，所以开漏输出模式下引脚既不输出高电平，也不输出低电平，为高阻态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;推挽输出模式&lt;/strong&gt;一般应用在输出电平为 0 和 3.3V 而且需要高速切换开关状态的场合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开漏输出模式&lt;/strong&gt;一般应用在 I2C、SMBUS 通信等需要 线与功能的总线电路中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在单片机中除了必须用开漏模式的场合，一般习惯使用推挽输出模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、输出数据寄存器&lt;/strong&gt;：前面我们知道双了 MOS 管结构电路的输入信号，是由 GPIO 输出数据寄存器 GPIOx_ODR 提供的，因此我们可以通过修改输出数据寄存器的值，就可以修改 GPIO 引脚的输出电平。而置位 / 复位寄存器 GPIOx_BSRR 可以通过修改输出数据寄存器的值，从而影响电路的输出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、复用功能输出&lt;/strong&gt;：复用功能输出中的复用是指 STM32 的其他片上外设对 GPIO 引脚进行控制，此时 GPIO 引脚用作该外设功能的一部分，算是第二用途。从其他外设引出来的复用功能输出信号与 GPIO 本身的数据寄存器都连接到双 MOS 管结构的输入中。&lt;/p&gt;
&lt;h4 id=&#34;三-输入输出模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-输入输出模式&#34;&gt;#&lt;/a&gt; 三、输入输出模式&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;GPIO 八种模式&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;模式&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;浮空输入&lt;/td&gt;
&lt;td&gt;GPIO_Mode_IN_FLOATING&lt;/td&gt;
&lt;td&gt;若引脚悬空，则电平不确定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;上拉输入&lt;/td&gt;
&lt;td&gt;GPIO_Mode_IPU&lt;/td&gt;
&lt;td&gt;内部连接上拉电阻，悬空时默认高电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;下拉输入&lt;/td&gt;
&lt;td&gt;GPIO_Mode_IPD&lt;/td&gt;
&lt;td&gt;内部连接下拉电阻，悬空时默认低电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;模拟输入&lt;/td&gt;
&lt;td&gt;GPIO_Mode_AIN&lt;/td&gt;
&lt;td&gt;GPIO 无效，引脚直接接入内部 ADC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开漏输出&lt;/td&gt;
&lt;td&gt;GPIO_Mode_Out_OD&lt;/td&gt;
&lt;td&gt;高电平为高阻态，低电平接 VSS（负极）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;推挽输出&lt;/td&gt;
&lt;td&gt;GPIO_Mode_Out_PP&lt;/td&gt;
&lt;td&gt;高电平接 VDD，低电平接 VSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;复用开漏输出&lt;/td&gt;
&lt;td&gt;GPIO_Mode_AF_OD&lt;/td&gt;
&lt;td&gt;由片上外设控制，高电平为高阻态，低电平接 VSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;复用推挽输出&lt;/td&gt;
&lt;td&gt;GPIO_Mode_AF_PP&lt;/td&gt;
&lt;td&gt;由片上外设控制，高电平接 VDD，低电平接 VSS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;3.1 浮空输入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;浮空输入模式下， &lt;code&gt;I/O&lt;/code&gt;  端口的电平信号直接进入输入数据寄存器。也就是说，I/O 的电平状态是不确定的，完全由外部输入决定；如果在该引脚悬空（在无信号输入）的情况下，读取该端口的电平是不确定的，通常用于 &lt;code&gt;IIC&lt;/code&gt; 、 &lt;code&gt;USART&lt;/code&gt;  等总线设备上。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231125013402022.png&#34; alt=&#34;image-20231125013402022&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 上拉输入模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上拉输入模式下， &lt;code&gt;I/O&lt;/code&gt;  端口的电平信号直接进入输入数据寄存器。但是在 &lt;code&gt;I/O&lt;/code&gt;  端口悬空（在无信号输入）的情况下，输入端的电平保持在高电平（并且在 &lt;code&gt;I/O&lt;/code&gt;  端口输入为低电平的时候，输入端的电平也是低电平）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231125013449506.png&#34; alt=&#34;image-20231125013449506&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.3 下拉输入模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下拉输入模式下， &lt;code&gt;I/O&lt;/code&gt;  端口的电平信号直接进入输入数据寄存器。但是在 &lt;code&gt;I/O&lt;/code&gt;  端口悬空（在无信号输入）的情况下，输入端的电平保持在低电平；并且在 I/O 端口输入为高电平的时候，输入端的电平也是高电平。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231125013542238.png&#34; alt=&#34;image-20231125013542238&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.4 模拟输入模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模拟输入模式下， &lt;code&gt;I/O&lt;/code&gt;  端口的模拟信号（电压信号，而非电平信号）直接模拟输入到片上外设模块，比如 &lt;code&gt;ADC&lt;/code&gt;  模块等。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231125013643774.png&#34; alt=&#34;image-20231125013643774&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.5 开漏输出模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当系统配置为开漏输出模式时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上方的 P-MOS 管完全不工作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果我们控制输出为 0，低电平，则 P-MOS 管关闭，N-MOS 管导通，使输出接地；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若控制输出为 1（它无法直接输出高电平）时，则 P-MOS 管和 N-MOS 管都关闭，所以开漏输出模式下引脚既不输出高电平，也不输出低电平，为高阻态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3.6 开漏复用输出模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开漏复用输出模式，与开漏输出模式很是类似。只是输出的高低电平的来源，不是让 CPU 直接写输出数据寄存器，取而代之利用片上外设模块的复用功能输出来决定的，一般用于片内外设功能： &lt;code&gt;TX1，MOSI，MISO，SCK，SS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.7 推挽输出模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当系统配置为推挽输出模式时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若向该结构中输入高电平，经过反向后，上方的 P-MOS 导通，下方的 N-MOS 关闭，对外输出高电平；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若向该结构中输入低电平时，经过反向后，下方的 N-MOS 管导通，上方的 P-MOS 关闭，对外输出低电平。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当引脚高低电平切换时，两个 MOS 管轮流导通，P 管负责灌电流，N 管负责拉电流，使其负载能力和开关速度都比普通的方式有很大的提高。推挽输出的低电平为 0V，高电平为 3.3V。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3.8 推挽复用输出模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;推挽复用输出模式，与推挽输出模式很是类似。只是输出的高低电平的来源，不是让 CPU 直接写输出数据寄存器，而是利用片上外设模块的复用功能输出来决定的，常见采用推挽输出模式的一般为片内外设功能 &lt;code&gt;IIC&lt;/code&gt;  的 &lt;code&gt;SCL&lt;/code&gt; 、 &lt;code&gt;SDL&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20231125014016489.png&#34; alt=&#34;image-20231125014016489&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;四-开漏输出和推挽输出的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-开漏输出和推挽输出的区别&#34;&gt;#&lt;/a&gt; 四、开漏输出和推挽输出的区别&lt;/h4&gt;
&lt;p&gt;开漏输出和推挽输出模式的区别主要是开漏输出&lt;strong&gt;只可以输出强低电平，高电平得靠外部电阻拉高&lt;/strong&gt;。输出端相当于三极管的集电极，适合于做电流型的驱动，其吸收电流的能力相对强 (一般 20ma 以内)；推挽输出&lt;strong&gt;可以输出强高、低电平&lt;/strong&gt;，连接数字器件。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;推挽输出&lt;/th&gt;
&lt;th&gt;开漏输出&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;高电平驱动能力&lt;/td&gt;
&lt;td&gt;强&lt;/td&gt;
&lt;td&gt;由外部上拉电阻提供&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;低电平驱动能力&lt;/td&gt;
&lt;td&gt;强&lt;/td&gt;
&lt;td&gt;强&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;电平跳变速度&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;由外部上拉电阻决定，电阻越小，反应越快，功耗越大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;线与功能&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;电平转换&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;五-stm32中gpio的配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-stm32中gpio的配置&#34;&gt;#&lt;/a&gt; 五、STM32 中 GPIO 的配置&lt;/h4&gt;
&lt;p&gt;初始化 GPIO 的常用格式是：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_InitTypeDef GPIO_InitStructure&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_InitStructure&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;GPIO_Pin &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; GPIO_Pin_5&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//LED0-- PB.5 端口配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_InitStructure&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;GPIO_Mode &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; GPIO_Mode_Out_PP&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 推挽输出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_InitStructure&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;GPIO_Speed &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; GPIO_Speed_50MHz&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 速度 50MHz&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;GPIO_Init&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;GPIOB&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; GPIO_InitStructure&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 根据设定参数配置 GPIO&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;IO&lt;/code&gt;  口速度设置有三个可选值：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;enum&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_Speed_10MHz&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_Speed_2MHz&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_Speed_50MHz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;GPIOSpeed_TypeDef&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;模式则有 8 个可选定义如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;enum&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; GPIO_Mode_AIN &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 模拟输入&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_Mode_IN_FLOATING &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x04&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 浮空输入&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_Mode_IPD &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 下拉输入&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_Mode_IPU &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x48&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 上拉输入&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_Mode_Out_OD &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 开漏输出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_Mode_Out_PP &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 通用推挽输出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_Mode_AF_OD &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x1C&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 复用开漏输出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;GPIO_Mode_AF_PP &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0x18&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 复用推挽&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;GPIOMode_TypeDef&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;名词解释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高阻态：是一个数字电路里常见的术语，指的是电路的一种输出状态，既不是高电平也不是低电平，如果高阻态再输入下一级电路的话，对下级电路无任何影响，和没接一样，如果用万用表测的话有可能是高电平也有可能是低电平，随它后面接的东西定的。电路分析时高阻态可做开路理解。你可以把它看作输出（输入）电阻非常大。它的极限状态可以认为悬空（开路）。也就是说理论上高阻态不是悬空，它是对地或对电源电阻极大的状态。而实际应用上与引脚的悬空几乎是一样的。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://littlestory1.github.io/2023/11/21/stm32/stm32%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/</guid>
            <title>stm32前言</title>
            <link>https://littlestory1.github.io/2023/11/21/stm32/stm32%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/</link>
            <category term="stm32单片机" scheme="https://littlestory1.github.io/categories/stm32/" />
            <category term="stm32" scheme="https://littlestory1.github.io/tags/stm32/" />
            <pubDate>Tue, 21 Nov 2023 22:38:11 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要用于记录 stm32 的知识点以及学习过程，这样慢慢积累下来，会有莫名的成就感&lt;/p&gt;
&lt;p&gt;如果有误，欢迎加我 qq 指出错误&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用板子：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;stm32f103c8t6 最小系统板&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stm32 三种开发方式的区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;寄存器模式&lt;/strong&gt;：最底层的开发，运行速度最快。实际上也是使用了固件库，但是不是使用固件库的函数，而是使用了固件库的定义，包括宏定义，结构体定义。和 51 的开发差不多，但因为 32 的寄存器太多，实际开发手动配置大量寄存器极其耗费时间，同时在没有注释的情况下可读性差，所以较少使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标准库模式&lt;/strong&gt;：基于寄存器进行了函数的封装，而由于函数封装以及内部大量的检查参数有效性的代码，运行速度相对于寄存器模式较慢。封装之后可以根据函数名字就能明白代码作用，容易记忆，使用方便，所以较多人使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HAL 库模式&lt;/strong&gt;：全称是 Hardware Abstraction Layer（抽象印象层），相比于标准库更加深入的封装，有句柄、回调函数等概念，因此相对于标准库模式有更好的可移植性（可在不同芯片的移植），但代价就是更多的性能损失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本系列采用标准库模式&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://littlestory1.github.io/2023/11/21/note/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
            <title>第一篇博客</title>
            <link>https://littlestory1.github.io/2023/11/21/note/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
            <category term="杂谈" scheme="https://littlestory1.github.io/categories/note/" />
            <category term="杂谈" scheme="https://littlestory1.github.io/tags/%E6%9D%82%E8%B0%88/" />
            <pubDate>Tue, 21 Nov 2023 22:23:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;觉得原本的博客主题过于花里胡哨，于是换了个主题，然后把全部文章删了，重新整理，重新写&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
